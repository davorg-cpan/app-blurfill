name: Publish Docker Image

on:
  push:
    tags:
      - 'RELEASE_*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for the Docker image'
        required: true
        type: string

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set version from tag
        if: github.event_name == 'push'
        run: |
          # Extract version from tag name (RELEASE_X.Y.Z -> X.Y.Z)
          VERSION=${GITHUB_REF#refs/tags/RELEASE_}
          if [ -z "$VERSION" ] || [ "$VERSION" = "$GITHUB_REF" ]; then
            echo "Error: Failed to extract version from tag $GITHUB_REF"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Set version from manual input
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: davorg
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push Docker image
        id: docker_build
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            davorg/app-blurfill:${{ env.VERSION }}
            davorg/app-blurfill:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build debug image to capture logs
        if: steps.docker_build.outcome == 'failure'
        id: debug_build
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.debug
          push: false
          load: true
          tags: app-blurfill-debug:latest
          platforms: linux/amd64
          cache-from: type=gha
      
      - name: Extract cpanm build logs
        if: steps.docker_build.outcome == 'failure'
        continue-on-error: true
        run: |
          # Create directory for logs
          mkdir -p cpanm-build-logs
          
          # Try to extract logs from the debug container if it was created
          if docker image inspect app-blurfill-debug:latest >/dev/null 2>&1; then
            echo "Debug image found, extracting logs..."
            if CONTAINER_ID=$(docker create app-blurfill-debug:latest 2>/dev/null); then
              echo "Container created: $CONTAINER_ID"
              docker cp $CONTAINER_ID:/app/cpanm-logs/. cpanm-build-logs/ 2>/dev/null || echo "No logs found in /app/cpanm-logs"
              docker cp $CONTAINER_ID:/root/.cpanm/work/. cpanm-build-logs/cpanm-work/ 2>/dev/null || echo "No logs found in /root/.cpanm/work"
              docker rm $CONTAINER_ID
            else
              echo "Failed to create container from debug image"
            fi
          else
            echo "Debug image not found (build may have failed early)"
          fi
          
          # List what we found
          echo "Captured logs:"
          find cpanm-build-logs -type f 2>/dev/null || echo "No log files found"
      
      - name: Upload cpanm build logs
        if: steps.docker_build.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: cpanm-build-logs
          path: cpanm-build-logs/
          if-no-files-found: warn
          retention-days: 30
      
      - name: Fail if build failed
        if: steps.docker_build.outcome == 'failure'
        run: |
          echo "Docker build failed. Check the uploaded artifacts for cpanm build logs."
          exit 1
